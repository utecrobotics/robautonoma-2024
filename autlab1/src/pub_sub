#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import Quaternion
from sensor_msgs.msg import Imu 

class SuscriptorQuaternion(object):
    def __init__(self):
        topic = 'topic_quat'
        self.pub = rospy.Subscriber(topic, Quaternion, self.callback_point)
        self.quat = Quaternion()
        
    def callback_point(self, msg):
        self.quat = msg

    def get_quaternion(self):
        return self.quat

if __name__ == "__main__": # Inicio del programa principal

    rospy.init_node('nodo_publicador_suscriptor') # Inicializar el nodo
    sub = SuscriptorQuaternion() # Crear el suscriptor

    # Declarar del publicador
    topic = 'topic_imu' 
    pub = rospy.Publisher(topic, Imu, queue_size=1)
    
    # Creación de una instancia (vacía) del mensaje
    imu_msg = Imu()

    # Tiempo de ejecución del bucle (en Hz)
    rate = rospy.Rate(2)
    
    while not rospy.is_shutdown():
        # Leer el valor actual (del suscriptor)
        quat = sub.get_quaternion()
        # Asignar los valores al mensaje
        imu_msg.header.stamp = rospy.Time.now()
        imu_msg.orientation.x = quat.x
        imu_msg.orientation.y = quat.y
        imu_msg.orientation.z = quat.z
        imu_msg.orientation.w = quat.w
        # Publicar el mensaje
        pub.publish(imu_msg)
        # Esperar
        rate.sleep()
