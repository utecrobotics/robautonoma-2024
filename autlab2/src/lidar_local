#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from __future__ import print_function
import rospy
import numpy as np


class Lidar(object):
  
  def __init__(self):
    # Crear el suscriptor al tópico del LiDAR

    # Esperar 1 segundo
    rospy.sleep(1)
    
    # Precalcular un vector de numpy que contenga los ángulos para cada
    # rango. Se puede usar numpy.arange, por ejemplo

        

    # Almacenar los rangos máximo y mínimo que puede leer el LiDAR

        

        
  def callback(self, msg):
    # Callback para el suscriptor


        
  def get_xy(self):
    """ Retorna los valores x,y de la medición, en el sistema del LiDAR
    """
        
    # Obtener los rangos medidos
        

    # Filtrar los rangos que no son válidos: mantener solo los rangos
    # válidos y sus correspondientes ángulos



    # Convertir los rangos válidos en x, y


    return x,y


if __name__ == "__main__":

  # Inicializar el nodo
  rospy.init_node('nodo_leer_lidar')

  # Objeto que lee el escaneo
  lidar = Lidar()

  # Tiempo de ejecución del bucle (en Hz)
  rate = rospy.Rate(1)
  
  while not rospy.is_shutdown():
    # Lectura de los valores x, y
    # Tanto x como y deben ser arreglos de numpy
    x, y = lidar.get_xy()
    
    # Esperar
    rate.sleep()