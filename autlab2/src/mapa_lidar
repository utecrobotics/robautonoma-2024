#!/usr/bin/env python3
import rospy
import numpy as np
from sensor_msgs.msg import LaserScan
from autlab2.msg import ArrayXY
import tf


def rotFromQuat(q):
  """ q = [ex, ey, ez, ew]
  """
  return np.array([[2.*(q[3]**2+q[0]**2)-1., 2.*(q[0]*q[1]-q[3]*q[2]), 2.*(q[0]*q[2]+q[3]*q[1])],
                   [2.*(q[0]*q[1]+q[3]*q[2]), 2.*(q[3]**2+q[1]**2)-1., 2.*(q[1]*q[2]-q[3]*q[0])],
                   [2.*(q[0]*q[2]-q[3]*q[1]), 2.*(q[1]*q[2]+q[3]*q[0]), 2.*(q[3]**2+q[2]**2)-1.]])


def lidar_wrt_base():
  """
  Sistema del lidar con respecto a base_footprint
  """
  tflistener = tf.TransformListener()
  T = np.eye(4)
  rospy.sleep(0.5)
  try:
    (trans, rot) = tflistener.lookupTransform('base_footprint', 'base_scan', rospy.Time(0))
    T[0:3,0:3] = rotFromQuat(rot)
    T[0:3,3] = trans
  except:
    pass
  
  return T


class Odometria(object):
  # Completar





    

class Lidar(object):
  # Similar a lo desarrollado anteriormente




    
